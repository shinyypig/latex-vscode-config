global
function gen_matrix(nrow, ncol, index) {
    let results = "\n";
    let order = 1;
    for (var i=0; i<nrow; i++){
        results += '    ';
        for(var j = 0;j <ncol;j++){
            results += "$" +(order ).toString() + ((j == ncol -1) ?  " \\\\\\" : " & ");
            order ++;
        }
        results += index ? "\n" : "";
    }
    return results;
}

function gen_fig(label, nfig) {
    let results = "\n";
    results += "\\begin{figure}[htb!]\n";
    results += "    \\centering\n";
    let order = 2;
    if (nfig == 1) {
        results += "    \\includegraphics[width=.${1:4}\\textwidth]{./img${2}}\n";
    } 
    else {
        for (var i=0; i<nfig; i++){
            results += "    \\begin{subfigure}{.${1:3}\\textwidth}\n";
            results += "        \\includegraphics[width=\\textwidth]{./img${" + (order).toString() + "}}\n";
            results += "        \\caption{}\n";
            results += "        \\label{fig:" + label + "_" + (i+1).toString() + "}\n";
            results += "    \\end{subfigure}\n";
            order ++;
        }
    }
    results += "    \\caption{${" + (order).toString() + "}}\n";
    results += "    \\label{fig:" + label + "}\n";
    results += "\\end{figure}\n";
    return results;
}
endglobal

snippet bcap "bicaption" iA
\bicaption{\quad }{\quad }
endsnippet

snippet tcg "textcolor" iA
\textcolor{green}{${1:${VISUAL}}}$0
endsnippet

# math enverniment 

# Greek letters
snippet @a "alpha" imA
\alpha
endsnippet

snippet @A "alpha" imA
\alpha
endsnippet

snippet @b "beta" imA
\beta
endsnippet

snippet @B "beta" imA
\beta
endsnippet

snippet @c "chi" imA
\chi
endsnippet

snippet @C "chi" imA
\chi
endsnippet

snippet @g "gamma" imA
\gamma
endsnippet

snippet @G "Gamma" imA
\Gamma
endsnippet

snippet @d "delta" imA
\delta
endsnippet

snippet @D "Delta" imA
\Delta
endsnippet

snippet @e "epsilon" imA
\epsilon
endsnippet

snippet @E "epsilon" imA
\epsilon
endsnippet

snippet :e "varepsilon" imA
\varepsilon
endsnippet

snippet :E "varepsilon" imA
\varepsilon
endsnippet

snippet @z "zeta" imA
\zeta
endsnippet

snippet @Z "zeta" imA
\zeta
endsnippet

snippet @t "theta" imA
\theta
endsnippet

snippet @T "Theta" imA
\Theta
endsnippet

snippet :t "tau" imA
\tau
endsnippet

snippet @k "kappa" imA
\kappa
endsnippet

snippet @K "kappa" imA
\kappa
endsnippet

snippet @l "lambda" imA
\lambda
endsnippet

snippet @L "Lambda" imA
\Lambda
endsnippet

snippet @m "mu" imA
\mu
endsnippet

snippet @M "mu" imA
\mu
endsnippet

snippet @r "rho" imA
\rho
endsnippet

snippet @R "rho" imA
\rho
endsnippet

snippet @s "sigma" imA
\sigma
endsnippet

snippet @S "Sigma" imA
\Sigma
endsnippet

snippet @o "omega" imA
\omega
endsnippet

snippet @O "Omega" imA
\Omega
endsnippet

snippet $ "inline math" iA
$${VISUAL}$0$
endsnippet

priority 10
snippet \[ "bracket" iAm
\\[ ${1:${VISUAL}} \\]$0
endsnippet

priority 10
snippet \( "bracket" iAm
\\( ${1:${VISUAL}} \\)$0
endsnippet

priority 10
snippet \{ "bracket" iAm
\\{ ${1:${VISUAL}} \\}$0
endsnippet

priority 10
snippet @| "left| right|" iAm
\left| ${1:${VISUAL}} \right|$0
endsnippet

priority 10
snippet @{ "\left\{ \right\}" iAm
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

priority 10000
snippet ` bl ` "left\{ right." iAm
\left\\{ ${1:${VISUAL}} \right.$0
endsnippet

priority 10
snippet ` br ` "left. right\}" iAm
\left. ${1:${VISUAL}} \right\\}$0
endsnippet

snippet @[ "left[ right]" iAm
\left[ ${1:${VISUAL}} \right]$0
endsnippet

snippet @( "left( right)" iAm
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet @< "leftangle rightangle" iAm
\left< ${1:${VISUAL}} \right>$0
endsnippet

# RR -> \mathbb{R}
snippet `RR|CC|ZZ` "sets" iA
\\mathbb{``rv=m[0].charAt(0)``}
endsnippet

# bmat m n -> a matrix with the size of m*n
snippet `(bm|pm|m|vm)at ([0-9]+) ([0-9]+) ` "matrix" bA
\begin{``rv = m[1]``atrix}``
    rv = gen_matrix(m[2],m[3],1);
``\end{``rv = m[1]``atrix}$0
endsnippet

# fig label n -> figure enverniment with n subfigures, and the labels are specified by label
snippet `fig (\S+) ([0-9]+) ` "figure" bA
``rv = gen_fig(m[1], m[2])``$0
endsnippet

# spl -> the split enverniment with the selected text
snippet spl "split" Am
\begin{split}
    ${VISUAL}$0
\end{split}
endsnippet

# ali -> the aligned enverniment the selected text
snippet ali "aligned" Am
\begin{aligned}
    ${VISUAL}$0
\end{aligned}
endsnippet

# fr -> fractor enverniment with the selected text
snippet fr "frac" Am
\frac{${1:${VISUAL}}}{$2}$0
endsnippet


# {x}/ -> \frac{x}{}
snippet `\{.+\}/` "fraction" Am
``
let str = m[0];
str = str.slice(0, -1);
let lastIndex = str.length - 1;

let depth = 0;
let i = str.length - 1;

while (true) {
    if (str[i] == '}') depth += 1;
    if (str[i] == '{') depth -= 1;
    if (depth == 0) break;
    i -= 1;
}

let results = str.slice(0, i) + "\\frac{" + str.slice(i+1, -1) + "}";
results += "{$1}$0";
rv = results;
``
endsnippet

# => -> \Rightarrow
snippet `->` "implies" Am
\Rightarrow
endsnippet

# =< -> \Leftarrow
snippet `<-` "implied by" Am
\Leftarrow
endsnippet

# <= -> \leq
snippet `<=` "leq" Am
\leq
endsnippet

# >= -> \geq
snippet `>=` "geq" Am
\geq
endsnippet

# != -> \neq
snippet `!=` "neq" Am
\neq
endsnippet

snippet `~=` "approx: Am
\approx
endsnippet

# ... -> \cdots
snippet ... "dots" Am
\dots
endsnippet

snippet *** "cdots" Am
\cdots
endsnippet

snippet ;;; "vdots" Am
\vdots
endsnippet

snippet ::: "ddots" Am
\ddots
endsnippet

# inf -> \infty
snippet inf "\infty" iAm
\infty 
endsnippet

# lab abc  -> \label{abc}
snippet `lab (\S+) ` "label" Am
\label{``rv = m[1]``} 
endsnippet

# 10^x+y -> 10^{x+y}
# snippet `\^([^\{]\S*) ` "superscript" Am
# ^{``rv = m[1]``}
# endsnippet

snippet ^ "superscript" iAm
^{${1}}$0
endsnippet

snippet _ "subscript" iAm
_{${1}}$0
endsnippet

# 10_x+y -> 10_{x+y}
snippet `_([^\{]\S*) ` "subscript" Am
_{``rv = m[1]``}
endsnippet

# \mathbf{A}^T -> \mathbf{A}^{\mathbrm T}
snippet `\^\{T` "transpose" iAm
^{\mathrm{T}
endsnippet

# \mathbf{A}^H -> \mathbf{A}^{\mathbrm H}
snippet `\^\{H` "hermitian" iAm
^{\mathrm{H}
endsnippet

# cal -> \mathcal{}
snippet cal "mathcal" iAm
\mathcal{${1:${VISUAL}}}$0
endsnippet

# bb -> \mathbb{}
snippet bb "mathbb" iAm
\mathbb{${1:${VISUAL}}}$0
endsnippet

# bf -> \mathbf{}
snippet bf "mathbf" iAm
\mathbf{${1:${VISUAL}}}$0
endsnippet

# txt -> \text{}
snippet txt "text" iA
\text{${1:${VISUAL}}}$0
endsnippet

# tit -> \textit{}
snippet tit "text it" iA
\textit{${1:${VISUAL}}}$0
endsnippet

# tbf -> \textbf{}
snippet tbf "text bf" iA
\textbf{${1:${VISUAL}}}$0
endsnippet

# sin -> \sin
snippet `(?<!arc)(?<!\\)(sin|cos|tan|csc|sec|cot|ln|log|lg|det|ker|max|min)` "function" iAm
\``rv=m[1]+' '``
endsnippet

snippet `\\sin c` "function" iAm
\text{sinc}
endsnippet

snippet `(?<=\\(sin|cos|tan|csc|sec|cot))( )h` "function" iAm
``rv='h '``
endsnippet

# in -> \in
snippet ` (in|notin|subset|subseteq|supset|supseteq) ` "sets operator" wAm
 \``rv = m[1]`` 
endsnippet

# cap -> \cap
snippet ` (circ|cap|cup|land|lor|lnot|oplus|ominus|times|otimes|sqcap|sqcup|vdash|models) ` "logic operator" wAm
 \``rv = m[1]`` 
endsnippet

snippet empty "empty set" Am
\varnothing 
endsnippet

# ==== Auto Capture Hat Operation ====

# Ahbar -> \overline{A}
snippet `(\\?[a-zA-Z]\w*({?\w*})?)(bar|BAR)` "Bar" iAm
\overline{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*({?\w*})?)(htd|TD)` "tilde" iAm
\tilde{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*({?\w*})?)(hat|HAT)` "hat" iAm
\hat{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*({?\w*})?)(hvec)` "Vector postfix" iAm
\vec{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*({?\w*})?)(rta)` "Vector postfix" iAm
\overrightarrow{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*({?\w*})?)(hdot)` "dot" iAm
\dot{``rv = m[1]``}
endsnippet

snippet `(\\?[a-zA-Z]\w*({?\w*})?)(hddot)` "ddot" iAm
\ddot{``rv = m[1]``}
endsnippet

snippet `^( *)lm` "inline Math" bA
``rv = m[1]``\[
``rv = m[1]``    ${VISUAL}$0
``rv = m[1]``\]
endsnippet

snippet `^( *)eq` "equation" bA
``rv = m[1]``\begin{equation}
``rv = m[1]``    ${VISUAL}$0
``rv = m[1]``\end{equation}
endsnippet

snippet `^( *)beg` "begin{} / end{}" bA
``rv = m[1]``\begin{$1}
``rv = m[1]``	${VISUAL}$0
``rv = m[1]``\end{$1}
endsnippet

snippet `^( *)minipage` "minipage" bA
``rv = m[1]``\begin{minipage}{.${1:45}\textwidth}
``rv = m[1]``	${VISUAL}$0
``rv = m[1]``\end{minipage}
endsnippet

priority 100
snippet `(\\?[a-zA-Z0-9]\w*({?\w*})?)(bf|BF)` "mathbf" iAm
\mathbf{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z0-9]\w*({?\w*})?)(bm|BM)` "mathbm" iAm
\bm{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*({?\w*})?)bb` iAm
\mathbb{``rv = m[1]``}$0
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*({?\w*})?)cal` "mathcal" iAm
\mathcal{``rv = m[1].toUpperCase()``}$0
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*({?\w*})?)(frak)` "mathfrak" iAm
\mathfrak{``rv = m[1]``}
endsnippet

priority 100
snippet `(?<!\\)\b([a-zA-Z]+)rm` "mathrm" iAm
\mathrm{``rv = m[1]``}
endsnippet

# latex enverniment 

priority 100
snippet `ref (\S+) ` "reference" A
\cref{``rv = m[1]``}
endsnippet

priority 100
snippet `cite (\S+) ` "cite" A
\cite{``rv = m[1]``}
endsnippet

priority 100
snippet `(chapter|section|subsection|subsubsection) (\S+) ` "paragraph" bA
\\``rv = m[1]``{``rv = m[2]``}
$0
endsnippet